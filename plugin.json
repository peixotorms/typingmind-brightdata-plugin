{
  "version": 2,
  "uuid": "brightdata-web-fetcher",
  "id": "brightdata-web-fetcher",
  "title": "BrightData Web Fetcher with OpenAI",
  "emoji": "üåê",
  "iconURL": "",
  "description": "Search the web or fetch webpage content using BrightData APIs and extract structured JSON data with OpenAI processing.",
  "userSettings": [
    {
      "name": "serpApiKey",
      "label": "BrightData SERP API Key",
      "description": "Your BrightData API key for SERP (search) requests",
      "type": "password",
      "required": true
    },
    {
      "name": "serpZone",
      "label": "SERP Zone ID",
      "description": "BrightData zone identifier for SERP API (default: serp_api1_web_search)",
      "defaultValue": "serp_api1_web_search",
      "required": false
    },
    {
      "name": "unlockerApiKey",
      "label": "BrightData Web Unlocker API Key",
      "description": "Your BrightData API key for Web Unlocker requests",
      "type": "password",
      "required": true
    },
    {
      "name": "unlockerZone",
      "label": "Web Unlocker Zone ID",
      "description": "BrightData zone identifier for Web Unlocker API (default: web_unlocker1)",
      "defaultValue": "web_unlocker1",
      "required": false
    },
    {
      "name": "openaiApiKey",
      "label": "OpenAI API Key",
      "description": "Your OpenAI API key for content extraction and structuring",
      "type": "password",
      "required": true
    },
    {
      "name": "openaiModel",
      "label": "OpenAI Model",
      "description": "OpenAI model to use for content extraction",
      "type": "enum",
      "values": [
        "gpt-4.1",
        "o4-mini",
        "gpt-4.1-mini",
        "gpt-4.1-nano"
      ],
      "defaultValue": "gpt-4.1-mini",
      "required": false
    }
  ],
  "openaiSpec": {
    "name": "brightdata_web_fetcher",
    "description": "Search the web or fetch webpage content using BrightData APIs. Returns structured JSON data: search results with source name, icon, title, excerpt, and URL; webpage content with extracted article data including title, author, body HTML, images, and metadata.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "search",
            "fetch"
          ],
          "description": "Action to perform: 'search' for web searches returning structured search results, 'fetch' for extracting structured article content from webpages"
        },
        "query": {
          "type": "string",
          "description": "Search query (required when action is 'search')"
        },
        "search_type": {
          "type": "string",
          "enum": [
            "web",
            "news",
            "images",
            "videos",
            "shopping",
            "scholar"
          ],
          "description": "Type of search (only used when action is 'search')",
          "default": "web"
        },
        "url": {
          "type": "string",
          "description": "URL to fetch content from (required when action is 'fetch')"
        }
      },
      "required": [
        "action"
      ]
    }
  },
  "implementationType": "javascript",
  "implementation": "implementation.js"
}

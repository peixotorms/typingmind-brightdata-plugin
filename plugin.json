{
  "version": 2,
  "uuid": "brightdata-web-fetcher",
  "id": "brightdata-web-fetcher",
  "title": "BrightData Web Fetcher",
  "emoji": "üåê",
  "iconURL": "",
  "description": "Search Google or fetch web content using BrightData APIs. Use `gl` for country and `hl` for language. Supports up to 20 parallel search queries or URLs per request.",
  "userSettings": [
    {
      "name": "serpApiKey",
      "label": "BrightData SERP API Key",
      "description": "Your BrightData API key for Google search requests.",
      "type": "password",
      "required": true
    },
    {
      "name": "serpZone",
      "label": "SERP Zone ID",
      "description": "BrightData zone identifier for SERP API requests. Leave default unless using a custom zone.",
      "defaultValue": "serp_api1_web_search",
      "required": false
    },
    {
      "name": "unlockerApiKey",
      "label": "BrightData Web Unlocker API Key",
      "description": "Your BrightData API key for bypassing website protections when fetching webpages. Required for content extraction.",
      "type": "password",
      "required": true
    },
    {
      "name": "unlockerZone",
      "label": "Web Unlocker Zone ID",
      "description": "BrightData zone identifier for Web Unlocker API requests. Leave default unless using a custom zone.",
      "defaultValue": "web_unlocker1",
      "required": false
    },
    {
      "name": "openaiApiKey",
      "label": "OpenAI API Key",
      "description": "Your OpenAI API key for content extraction and content cleaning via AI.",
      "type": "password",
      "required": true
    },
    {
      "name": "openaiModel",
      "label": "OpenAI Model",
      "description": "OpenAI model for content analysis.",
      "type": "enum",
      "values": [
        "gpt-4.1",
        "o4-mini",
        "gpt-4.1-mini",
        "gpt-4.1-nano"
      ],
      "defaultValue": "gpt-4.1-mini",
      "required": false
    }
  ],
  "openaiSpec": {
    "name": "brightdata_web_fetcher",
    "description": "Search Google (SERP API, use gl/country and hl/language for localization; supports up to 20 queries) or fetch content from up to 20 URLs in parallel (Web Unlocker API).",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "search",
            "fetch"
          ],
          "description": "'search': Google search (SERP API); 'fetch': web/page fetch (Web Unlocker API)"
        },
        "query": {
          "type": ["string", "array"],
          "items": { "type": "string" },
          "description": "Search query or array of queries (max 20, required when action is 'search')."
        },
        "tbm": {
          "type": "string",
          "enum": [
            "nws",
            "shop"
          ],
          "description": "Google search type: 'nws' for news, 'shop' for shopping."
        },
        "ibp": {
          "type": "string",
          "description": "For jobs search, use 'htl;jobs'."
        },
        "gl": {
          "type": "string",
          "description": "Google 'gl' parameter: country code for localization. Choose from Google's supported gl values."
        },
        "hl": {
          "type": "string",
          "description": "Google 'hl' parameter: interface language code. Choose from Google's supported hl values."
        },
        "start": {
          "type": "integer",
          "description": "Pagination result offset. 0 (default), 20 for second page, 40 for third, etc."
        },
        "num": {
          "type": "integer",
          "description": "Number of results to return per query. Default is 20."
        },
        "url": {
          "type": ["string", "array"],
          "items": {
            "type": "string"
          },
          "description": "Single URL or array of URLs (max 20) to fetch with Web Unlocker. Supports HTML/JSON/XML/JavaScript/CSS/text (cleaned if HTML)."
        }
      },
      "required": [
        "action"
      ]
    }
  },
  "implementationType": "javascript",
  "implementation": "implementation.js"
}
